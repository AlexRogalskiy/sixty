ca65 V2.18 - Git b8ae5c2
Main file   : ram2.s
Current file: ram2.s

000000r 1               D1 := $d17b
000000r 1               FE := $fe1f
000000r 1               checkdata := $3f
000000r 1               TEST_COUNT := $3d
000000r 1               
000000r 1               .macro verify address
000000r 1                   ldx address
000000r 1                   iny
000000r 1                   lda (checkdata),Y
000000r 1                   cmp address
000000r 1                   bne @fail
000000r 1               .endmacro
000000r 1               
000000r 1  20 rr rr         jsr @reset
000003r 1  A9 00            lda #0
000005r 1  85 3D            sta TEST_COUNT
000007r 1               
000007r 1               	;; Format:
000007r 1               	;; Sequence of test instructions, finishing with `jsr .test`.
000007r 1               	;; - quint: expected current $d17b and fe1f, then d17b in bank1, d17b in bank 2, and fe1f
000007r 1               	;; (All sequences start with lda $C080, just to reset things to a known state.)
000007r 1               	;; 0-byte to terminate tests.
000007r 1               
000007r 1  AD 88 C0     	lda $C088				; Read $C088 (read bank 1, no write)
00000Ar 1  20 rr rr     	jsr @test				;
00000Dr 1  11 33 11 22  	.byte $11, $33, $11, $22, $33
000011r 1  33           
000012r 1               
000012r 1  AD 80 C0     	lda $C080				; Read $C080 (read bank 2, no write)
000015r 1  20 rr rr     	jsr @test				;
000018r 1  22 33 11 22  	.byte $22, $33, $11, $22, $33		;
00001Cr 1  33           
00001Dr 1               
00001Dr 1  AD 81 C0     	lda $C081				; Read $C081 (ROM read, write disabled)
000020r 1  20 rr rr     	jsr @test				;
000023r 1  53 60 11 22  	.byte $53, $60, $11, $22, $33		;
000027r 1  33           
000028r 1               
000028r 1  AD 81 C0     	lda $C081				; Read $C081 (rom read, all else false)
00002Br 1  AD 89 C0     	lda $C089				; Read $C089 (ROM read, all else false)
00002Er 1  20 rr rr     	jsr @test				;
000031r 1  53 60 54 22  	.byte $53, $60, $54, $22, $61		;
000035r 1  61           
000036r 1               
000036r 1  AD 81 C0         lda $C081				; Read $C081, $C081 (read ROM, write RAM bank 2)
000039r 1  AD 81 C0     	lda $C081				;
00003Cr 1  20 rr rr     	jsr @test				;
00003Fr 1  53 60 11 54  	.byte $53, $60, $11, $54, $61		;
000043r 1  61           
000044r 1               
000044r 1  AD 81 C0     	lda $C081				; Read $C081, $C081, write $C081 (read ROM, write RAM bank bank 2)
000047r 1  AD 81 C0     	lda $C081				; See https://github.com/zellyn/a2audit/issues/3
00004Ar 1  8D 81 C0     	sta $C081				;
00004Dr 1  20 rr rr     	jsr @test				;
000050r 1  53 60 11 54  	.byte $53, $60, $11, $54, $61		;
000054r 1  61           
000055r 1               
000055r 1  AD 81 C0     	lda $C081				; Read $C081, $C081; write $C081, $C081
000058r 1  AD 81 C0     	lda $C081				; See https://github.com/zellyn/a2audit/issues/4
00005Br 1  8D 81 C0     	sta $C081				;
00005Er 1  8D 81 C0     	sta $C081				;
000061r 1  20 rr rr     	jsr @test				;
000064r 1  53 60 11 54  	.byte $53, $60, $11, $54, $61		;
000068r 1  61           
000069r 1               
000069r 1  AD 8B C0     	lda $C08B				; Read $C08B (read RAM bank 1, no write)
00006Cr 1  20 rr rr     	jsr @test				;
00006Fr 1  11 33 11 22  	.byte $11, $33, $11, $22, $33		;
000073r 1  33           
000074r 1               
000074r 1  AD 83 C0     	lda $C083				; Read $C083 (read RAM bank 2, no write)
000077r 1  20 rr rr     	jsr @test				;
00007Ar 1  22 33 11 22  	.byte $22, $33, $11, $22, $33		;
00007Er 1  33           
00007Fr 1               
00007Fr 1  AD 8B C0     	lda $C08B				; Read $C08B, $C08B (read/write RAM bank 1)
000082r 1  AD 8B C0     	lda $C08B				;
000085r 1  20 rr rr     	jsr @test				;
000088r 1  12 34 12 22  	.byte $12, $34, $12, $22, $34		;
00008Cr 1  34           
00008Dr 1               
00008Dr 1  AD 8F C0     	lda $C08F				; Read $C08F, $C087 (read/write RAM bank 2)
000090r 1  AD 87 C0     	lda $C087				;
000093r 1  20 rr rr     	jsr @test				;
000096r 1  23 34 11 23  	.byte $23, $34, $11, $23, $34		;
00009Ar 1  34           
00009Br 1               
00009Br 1  AD 87 C0     	lda $C087				; Read $C087, read $C08D (read ROM, write bank 1)
00009Er 1  AD 8D C0     	lda $C08D				;
0000A1r 1  20 rr rr     	jsr @test				;
0000A4r 1  53 60 54 22  	.byte $53, $60, $54, $22, $61		;
0000A8r 1  61           
0000A9r 1               
0000A9r 1  AD 8B C0     	lda $C08B				; Read $C08B, write $C08B, read $C08B (read RAM bank 1, no write)
0000ACr 1  8D 8B C0     	sta $C08B				; (this one is tricky: reset WRTCOUNT by writing halfway)
0000AFr 1  AD 8B C0     	lda $C08B				;
0000B2r 1  20 rr rr     	jsr @test				;
0000B5r 1  11 33 11 22  	.byte $11, $33, $11, $22, $33		;
0000B9r 1  33           
0000BAr 1               
0000BAr 1  8D 8B C0     	sta $C08B				; Write $C08B, write $C08B, read $C08B (read RAM bank 1, no write)
0000BDr 1  8D 8B C0     	sta $C08B				;
0000C0r 1  AD 8B C0     	lda $C08B				;
0000C3r 1  20 rr rr     	jsr @test				;
0000C6r 1  11 33 11 22  	.byte $11, $33, $11, $22, $33		;
0000CAr 1  33           
0000CBr 1               
0000CBr 1  18           	clc					; Read $C083, $C083 (read/write RAM bank 2)
0000CCr 1  A2 00        	ldx #0					; Uses "6502 false read"
0000CEr 1  FE 83 C0     	inc $C083,x				;
0000D1r 1  20 rr rr     	jsr @test				;
0000D4r 1  23 34 11 23  	.byte $23, $34, $11, $23, $34		;
0000D8r 1  34           
0000D9r 1               						;
0000D9r 1               
0000D9r 1  60           	rts
0000DAr 1               
0000DAr 1               @test:
0000DAr 1  EE 7B D1         inc D1
0000DDr 1  EE 1F FE         inc FE
0000E0r 1               	;; pull address off of stack: it points just below check data for this test.
0000E0r 1  68           	pla
0000E1r 1  85 3F        	sta checkdata
0000E3r 1  AA           	tax
0000E4r 1  68           	pla
0000E5r 1  85 40        	sta checkdata+1
0000E7r 1  48           	pha
0000E8r 1  8A           	txa
0000E9r 1  18           	clc
0000EAr 1  69 05        	adc #5
0000ECr 1  48           	pha
0000EDr 1  A0 00        	ldy #0
0000EFr 1               
0000EFr 1  AE 7B D1 C8      verify D1
0000F3r 1  B1 3F CD 7B  
0000F7r 1  D1 D0 3A     
0000FAr 1  AE 1F FE C8      verify FE
0000FEr 1  B1 3F CD 1F  
000102r 1  FE D0 2F     
000105r 1  AD 88 C0         lda $c088 ; $D17B in bank 1
000108r 1  AE 7B D1 C8      verify D1
00010Cr 1  B1 3F CD 7B  
000110r 1  D1 D0 21     
000113r 1  AD 80 C0         lda $c080 ; $D17B in bank 2
000116r 1  AE 7B D1 C8      verify D1
00011Ar 1  B1 3F CD 7B  
00011Er 1  D1 D0 13     
000121r 1  AE 1F FE C8      verify FE
000125r 1  B1 3F CD 1F  
000129r 1  FE D0 08     
00012Cr 1  E6 3D            inc TEST_COUNT
00012Er 1  20 rr rr         jsr @reset
000131r 1  60               rts
000132r 1               
000132r 1               @success:
000132r 1  18               clc
000133r 1  60               rts
000134r 1               
000134r 1               @fail:
000134r 1  00               brk
000135r 1               
000135r 1               @reset:
000135r 1               	;; Initialize to known state:
000135r 1               	;; - $11 in $D17B bank 1 (ROM: $53)
000135r 1               	;; - $22 in $D17B bank 2 (ROM: $53)
000135r 1               	;; - $33 in $FE1F        (ROM: $60)
000135r 1  AD 8B C0     	lda $C08B		; Read and write bank 1
000138r 1  AD 8B C0     	lda $C08B
00013Br 1  A9 11        	lda #$11
00013Dr 1  8D 7B D1     	sta D1
000140r 1  A9 33        	lda #$33
000142r 1  8D 1F FE     	sta FE
000145r 1  AD 83 C0     	lda $C083		; Read and write bank 2
000148r 1  AD 83 C0     	lda $C083
00014Br 1  A9 22        	lda #$22
00014Dr 1  8D 7B D1     	sta D1
000150r 1  AD 80 C0     	lda $C080
000153r 1  AD 7B D1     	lda D1
000156r 1  60           	rts
000156r 1               
