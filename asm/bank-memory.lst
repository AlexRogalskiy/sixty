
; ******** Source: bank-memory.s
     1                          ; Test access to the memory card ($D000 and above).
     2                          ; This is an adaptation of Zellyn's a2audit tests made to be run headlessly:  https://github.com/zellyn/a2audit
     3                          ; If the tests succeed, $3D contains the number of successful tests
     4                          ; If a test fails, the code lands on a BRK, $3D contains the number of passed tests,
     5                          ; and Y is the index of the comparison that failed (1-5)
     6                          ;
     7                          ; Cedric Beust, cedric@beust.com, 9/17/2020
     8                          ;
     9                          
    10                          D1 = $D17B
    11                          FE = $FE1F
    12                          CHECK_DATA = $3f
    13                          TEST_COUNT = $3d
    14                          
    15                          * = $300
    16                          
    17                          !macro verify .address {
    18                              ldx .address  ; Used to visually inspect the expected value
    19                              iny
    20                              lda (CHECK_DATA),Y
    21                              cmp .address
    22                              bne fail
    23                          }
    24                          
    25  0300 202704                 jsr reset
    26  0303 a900                   lda #0
    27  0305 853d                   sta TEST_COUNT
    28                          
    29                          	;; Format:
    30                          	;; Sequence of test instructions, finishing with `jsr .test`.
    31                          	;; - quint: expected current $d17b and fe1f, then d17b in bank1, d17b in bank 2, and fe1f
    32                          	;; (All sequences start with lda $C080, just to reset things to a known state.)
    33                          
    34  0307 ad88c0             	lda $C088				; Read $C088 (read bank 1, no write)
    35  030a 20cc03             	jsr test				;
    36  030d 1133112233         	!byte $11, $33, $11, $22, $33
    37                          
    38  0312 ad80c0             	lda $C080				; Read $C080 (read bank 2, no write)
    39  0315 20cc03             	jsr test				;
    40  0318 2233112233         	!byte $22, $33, $11, $22, $33		;
    41                          
    42  031d ad81c0             	lda $C081				; Read $C081 (ROM read, write disabled)
    43  0320 20cc03             	jsr test				;
    44  0323 5360112233         	!byte $53, $60, $11, $22, $33		;
    45                          
    46  0328 ad81c0             	lda $C081				; Read $C081 (rom read, all else false)
    47  032b ad89c0             	lda $C089				; Read $C089 (ROM read, all else false)
    48  032e 20cc03             	jsr test				;
    49  0331 5360542261         	!byte $53, $60, $54, $22, $61		;
    50                          
    51  0336 ad81c0                 lda $C081				; Read $C081, $C081 (read ROM, write RAM bank 2)
    52  0339 ad81c0             	lda $C081				;
    53  033c 20cc03             	jsr test				;
    54  033f 5360115461         	!byte $53, $60, $11, $54, $61		;
    55                          
    56  0344 ad81c0             	lda $C081				; Read $C081, $C081, write $C081 (read ROM, write RAM bank bank 2)
    57  0347 ad81c0             	lda $C081				; See https://github.com/zellyn/a2audit/issues/3
    58  034a 8d81c0             	sta $C081				;
    59  034d 20cc03             	jsr test				;
    60  0350 5360115461         	!byte $53, $60, $11, $54, $61		;
    61                          
    62  0355 ad81c0             	lda $C081				; Read $C081, $C081; write $C081, $C081
    63  0358 ad81c0             	lda $C081				; See https://github.com/zellyn/a2audit/issues/4
    64  035b 8d81c0             	sta $C081				;
    65  035e 8d81c0             	sta $C081				;
    66  0361 20cc03             	jsr test				;
    67  0364 5360115461         	!byte $53, $60, $11, $54, $61		;
    68                          
    69  0369 ad8bc0             	lda $C08B				; Read $C08B (read RAM bank 1, no write)
    70  036c 20cc03             	jsr test				;
    71  036f 1133112233         	!byte $11, $33, $11, $22, $33		;
    72                          
    73  0374 ad83c0             	lda $C083				; Read $C083 (read RAM bank 2, no write)
    74  0377 20cc03             	jsr test				;
    75  037a 2233112233         	!byte $22, $33, $11, $22, $33		;
    76                          
    77  037f ad8bc0             	lda $C08B				; Read $C08B, $C08B (read/write RAM bank 1)
    78  0382 ad8bc0             	lda $C08B				;
    79  0385 20cc03             	jsr test				;
    80  0388 1234122234         	!byte $12, $34, $12, $22, $34		;
    81                          
    82  038d ad8fc0             	lda $C08F				; Read $C08F, $C087 (read/write RAM bank 2)
    83  0390 ad87c0             	lda $C087				;
    84  0393 20cc03             	jsr test				;
    85  0396 2334112334         	!byte $23, $34, $11, $23, $34		;
    86                          
    87  039b ad87c0             	lda $C087				; Read $C087, read $C08D (read ROM, write bank 1)
    88  039e ad8dc0             	lda $C08D				;
    89  03a1 20cc03             	jsr test				;
    90  03a4 5360542261         	!byte $53, $60, $54, $22, $61		;
    91                          
    92  03a9 ad8bc0             	lda $C08B				; Read $C08B, write $C08B, read $C08B (read RAM bank 1, no write)
    93  03ac 8d8bc0             	sta $C08B				; (this one is tricky: reset WRTCOUNT by writing halfway)
    94  03af ad8bc0             	lda $C08B				;
    95  03b2 20cc03             	jsr test				;
    96  03b5 1133112233         	!byte $11, $33, $11, $22, $33		;
    97                          
    98  03ba 8d8bc0             	sta $C08B				; Write $C08B, write $C08B, read $C08B (read RAM bank 1, no write)
    99  03bd 8d8bc0             	sta $C08B				;
   100  03c0 ad8bc0             	lda $C08B				;
   101  03c3 20cc03             	jsr test				;
   102  03c6 1133112233         	!byte $11, $33, $11, $22, $33		;
   103                          
   104                          ;	clc					    ; Read $C083, $C083 (read/write RAM bank 2)
   105                          ;	ldx #0					; Uses "6502 false read"
   106                          ;	inc $C083,x				; Actually reads $c083 twice (same as bit $c083 x 2)
   107                          ;	jsr @test				;
   108                          ;	!byte $23, $34, $11, $23, $34		;
   109                          						;
   110                          
   111  03cb 60                 	rts
   112                          
   113                          test:
   114  03cc ee7bd1                 inc D1
   115  03cf ee1ffe                 inc FE
   116                          	;; pull address off of stack: it points just below check data for this test.
   117  03d2 68                 	pla
   118  03d3 853f               	sta CHECK_DATA
   119  03d5 aa                 	tax
   120  03d6 68                 	pla
   121  03d7 8540               	sta CHECK_DATA+1
   122  03d9 48                 	pha     ; Restore the stack so that returning will go to the next test
   123  03da 8a                 	txa
   124  03db 18                 	clc
   125  03dc 6905               	adc #5  ; add 5 since there are five values to skip
   126  03de 48                 	pha
   127  03df a000               	ldy #0
   128                          
   129  03e1 ae7bd1c8b13fcd7b...    +verify D1
   130  03ec ae1ffec8b13fcd1f...    +verify FE
   131  03f7 ad88c0                 lda $c088 ; $D17B in bank 1
   132  03fa ae7bd1c8b13fcd7b...    +verify D1
   133  0405 ad80c0                 lda $c080 ; $D17B in bank 2
   134  0408 ae7bd1c8b13fcd7b...    +verify D1
   135  0413 ae1ffec8b13fcd1f...    +verify FE
   136  041e e63d                   inc TEST_COUNT
   137  0420 202704                 jsr reset
   138  0423 60                     rts
   139                          
   140                          success:
   141  0424 18                     clc
   142  0425 60                     rts
   143                          
   144                          fail:
   145  0426 00                     brk
   146                          
   147                          reset:
   148                          	;; Initialize to known state:
   149                          	;; - $11 in $D17B bank 1 (ROM: $53)
   150                          	;; - $22 in $D17B bank 2 (ROM: $53)
   151                          	;; - $33 in $FE1F        (ROM: $60)
   152  0427 ad8bc0             	lda $C08B		; Read and write bank 1
   153  042a ad8bc0             	lda $C08B
   154  042d a911               	lda #$11
   155  042f 8d7bd1             	sta D1
   156  0432 a933               	lda #$33
   157  0434 8d1ffe             	sta FE
   158  0437 ad83c0             	lda $C083		; Read and write bank 2
   159  043a ad83c0             	lda $C083
   160  043d a922               	lda #$22
   161  043f 8d7bd1             	sta D1
   162  0442 ad80c0             	lda $C080
   163  0445 ad7bd1             	lda D1
   164  0448 60                 	rts
