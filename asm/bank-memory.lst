
; ******** Source: bank-memory.s
     1                          ; Test access to the memory card ($D000 and above).
     2                          ; This is an adaptation of Zellyn's a2audit tests made to be run headlessly:  https://github.com/zellyn/a2audit
     3                          ; If the tests succeed, $3D contains the number of successful tests
     4                          ; If a test fails, the code lands on a BRK, $3D contains the number of passed tests,
     5                          ; and Y is the index of the comparison that failed (1-5)
     6                          ;
     7                          ; Cedric Beust, cedric@beust.com, 9/17/2020
     8                          ;
     9                          
    10                          D1 = $D17B
    11                          FE = $FE1F
    12                          CHECK_DATA = $3f
    13                          TEST_COUNT = $3d
    14                          
    15                          * = $6000
    16                          
    17                          !macro verify .address {
    18                              ldx .address  ; Used to visually inspect the expected value
    19                              iny
    20                              lda (CHECK_DATA),Y
    21                              cmp .address
    22                              bne fail
    23                          }
    24                          
    25  6000 203561                 jsr reset
    26  6003 a900                   lda #0
    27  6005 853d                   sta TEST_COUNT
    28                          
    29                          	;; Format:
    30                          	;; Sequence of test instructions, finishing with `jsr .test`.
    31                          	;; - quint: expected current $d17b and fe1f, then d17b in bank1, d17b in bank 2, and fe1f
    32                          	;; (All sequences start with lda $C080, just to reset things to a known state.)
    33                          
    34  6007 ad88c0             	lda $C088				; Read $C088 (read bank 1, no write)
    35  600a 20da60             	jsr test				;
    36  600d 1133112233         	!byte $11, $33, $11, $22, $33
    37                          
    38  6012 ad80c0             	lda $C080				; Read $C080 (read bank 2, no write)
    39  6015 20da60             	jsr test				;
    40  6018 2233112233         	!byte $22, $33, $11, $22, $33		;
    41                          
    42  601d ad81c0             	lda $C081				; Read $C081 (ROM read, write disabled)
    43  6020 20da60             	jsr test				;
    44  6023 5360112233         	!byte $53, $60, $11, $22, $33		;
    45                          
    46  6028 ad81c0             	lda $C081				; Read $C081 (rom read, all else false)
    47  602b ad89c0             	lda $C089				; Read $C089 (ROM read, all else false)
    48  602e 20da60             	jsr test				;
    49  6031 5360542261         	!byte $53, $60, $54, $22, $61		;
    50                          
    51  6036 ad81c0                 lda $C081				; Read $C081, $C081 (read ROM, write RAM bank 2)
    52  6039 ad81c0             	lda $C081				;
    53  603c 20da60             	jsr test				;
    54  603f 5360115461         	!byte $53, $60, $11, $54, $61		;
    55                          
    56  6044 ad81c0             	lda $C081				; Read $C081, $C081, write $C081 (read ROM, write RAM bank bank 2)
    57  6047 ad81c0             	lda $C081				; See https://github.com/zellyn/a2audit/issues/3
    58  604a 8d81c0             	sta $C081				;
    59  604d 20da60             	jsr test				;
    60  6050 5360115461         	!byte $53, $60, $11, $54, $61		;
    61                          
    62  6055 ad81c0             	lda $C081				; Read $C081, $C081; write $C081, $C081
    63  6058 ad81c0             	lda $C081				; See https://github.com/zellyn/a2audit/issues/4
    64  605b 8d81c0             	sta $C081				;
    65  605e 8d81c0             	sta $C081				;
    66  6061 20da60             	jsr test				;
    67  6064 5360115461         	!byte $53, $60, $11, $54, $61		;
    68                          
    69  6069 ad8bc0             	lda $C08B				; Read $C08B (read RAM bank 1, no write)
    70  606c 20da60             	jsr test				;
    71  606f 1133112233         	!byte $11, $33, $11, $22, $33		;
    72                          
    73  6074 ad83c0             	lda $C083				; Read $C083 (read RAM bank 2, no write)
    74  6077 20da60             	jsr test				;
    75  607a 2233112233         	!byte $22, $33, $11, $22, $33		;
    76                          
    77  607f ad8bc0             	lda $C08B				; Read $C08B, $C08B (read/write RAM bank 1)
    78  6082 ad8bc0             	lda $C08B				;
    79  6085 20da60             	jsr test				;
    80  6088 1234122234         	!byte $12, $34, $12, $22, $34		;
    81                          
    82  608d ad8fc0             	lda $C08F				; Read $C08F, $C087 (read/write RAM bank 2)
    83  6090 ad87c0             	lda $C087				;
    84  6093 20da60             	jsr test				;
    85  6096 2334112334         	!byte $23, $34, $11, $23, $34		;
    86                          
    87  609b ad87c0             	lda $C087				; Read $C087, read $C08D (read ROM, write bank 1)
    88  609e ad8dc0             	lda $C08D				;
    89  60a1 20da60             	jsr test				;
    90  60a4 5360542261         	!byte $53, $60, $54, $22, $61		;
    91                          
    92  60a9 ad8bc0             	lda $C08B				; Read $C08B, write $C08B, read $C08B (read RAM bank 1, no write)
    93  60ac 8d8bc0             	sta $C08B				; (this one is tricky: reset WRTCOUNT by writing halfway)
    94  60af ad8bc0             	lda $C08B				;
    95  60b2 20da60             	jsr test				;
    96  60b5 1133112233         	!byte $11, $33, $11, $22, $33		;
    97                          
    98  60ba 8d8bc0             	sta $C08B				; Write $C08B, write $C08B, read $C08B (read RAM bank 1, no write)
    99  60bd 8d8bc0             	sta $C08B				;
   100  60c0 ad8bc0             	lda $C08B				;
   101  60c3 20da60             	jsr test				;
   102  60c6 1133112233         	!byte $11, $33, $11, $22, $33		;
   103                          
   104  60cb 18                 	clc					    ; Read $C083, $C083 (read/write RAM bank 2)
   105  60cc a200               	ldx #0					; Uses "6502 false read"
   106  60ce fe83c0             	inc $C083,x				; Actually reads $c083 twice (same as bit $c083 x 2)
   107  60d1 20da60             	jsr test				;
   108  60d4 2334112334         	!byte $23, $34, $11, $23, $34		;
   109                          						;
   110                          
   111  60d9 60                 	rts
   112                          
   113                          test:
   114  60da ee7bd1                 inc D1
   115  60dd ee1ffe                 inc FE
   116                          	;; pull address off of stack: it points just below check data for this test.
   117  60e0 68                 	pla
   118  60e1 853f               	sta CHECK_DATA
   119  60e3 aa                 	tax
   120  60e4 68                 	pla
   121  60e5 8540               	sta CHECK_DATA+1
   122  60e7 48                 	pha     ; Restore the stack so that returning will go to the next test
   123  60e8 8a                 	txa
   124  60e9 18                 	clc
   125  60ea 6905               	adc #5  ; add 5 since there are five values to skip
   126  60ec 48                 	pha
   127  60ed a000               	ldy #0
   128                          
   129  60ef ae7bd1c8b13fcd7b...    +verify D1
   130  60fa ae1ffec8b13fcd1f...    +verify FE
   131  6105 ad88c0                 lda $c088 ; $D17B in bank 1
   132  6108 ae7bd1c8b13fcd7b...    +verify D1
   133  6113 ad80c0                 lda $c080 ; $D17B in bank 2
   134  6116 ae7bd1c8b13fcd7b...    +verify D1
   135  6121 ae1ffec8b13fcd1f...    +verify FE
   136  612c e63d                   inc TEST_COUNT
   137  612e 203561                 jsr reset
   138  6131 60                     rts
   139                          
   140                          success:
   141  6132 18                     clc
   142  6133 60                     rts
   143                          
   144                          fail:
   145  6134 00                     brk
   146                          
   147                          reset:
   148                          	;; Initialize to known state:
   149                          	;; - $11 in $D17B bank 1 (ROM: $53)
   150                          	;; - $22 in $D17B bank 2 (ROM: $53)
   151                          	;; - $33 in $FE1F        (ROM: $60)
   152  6135 ad8bc0             	lda $C08B		; Read and write bank 1
   153  6138 ad8bc0             	lda $C08B
   154  613b a911               	lda #$11
   155  613d 8d7bd1             	sta D1
   156  6140 a933               	lda #$33
   157  6142 8d1ffe             	sta FE
   158  6145 ad83c0             	lda $C083		; Read and write bank 2
   159  6148 ad83c0             	lda $C083
   160  614b a922               	lda #$22
   161  614d 8d7bd1             	sta D1
   162  6150 ad80c0             	lda $C080
   163  6153 ad7bd1             	lda D1
   164  6156 60                 	rts
