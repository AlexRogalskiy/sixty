Decimal | Hexadecimal |
-----------------------------------------------------------------------------
32      | $20         | Text window left-edge (0-39)
33      | $21         | Text window width (1-40)
34      | $22         | Text window top-edge (0-23)
35      | $23         | Text window bottom (1-24)
36      | $24         | Horizontal cursor-position (0-39)
37      | $25         | Vertical cursor-position (0-23)
43      | $2B         | Boot slot * 16 (after boot only)
44      | $2C         | Lo-res line end-point
48      | $30         | Lo-res COLOR * 17
50      | $32         | Text output format [63=INVERSE 255=NORMAL 127=FLASH]
51      | $33         | Prompt-character (NOTE: POKE 51,0:GOTO LINE # will
        |             | sometimes prevent a false NOT DIRECT COMMAND
        |             | obtained with GOTO # alone.)
74-75   | $4A-$4B     | LOMEM address (INT)
76-77   | $4C-$4D     | HIMEM address (INT)
78-79   | $4E-$4F     | Random-Number Field
103-104 | $67-$68     | Start of Applesoft program- normally set to $801
        |             | (2049 decimal) and location $800 is set to $00.
        |             | NOTE: To load a program above hires page 1 (at
        |             | $4001), POKE 103,1: POKE 104,64: POKE 16384,0
        |             | and LOAD the program.
105-106 | $69-$6A     | LOMEM Start of varible space & end of Applesoft prgm
107-108 | $6B-$6C     | Start of array space  (FP)
109-110 | $6D-$6E     | End of array space  (FP)
111-112 | $6F-$70     | Start of string-storage  (FP)
115-116 | $73-$74     | HIMEM- the highest available Applesoft address +1
117-118 | $75-$76     | Line# being executed.  (FP)
119-120 | $77-$78     | Line# where program stopped.  (FP)
121-122 | $79-$7A     | Address of line executing.  (FP)
123-124 | $7B-$7C     | Current DATA line#
125-126 | $7D-$7E     | Next DATA address
127-128 | $7F-$80     | INPUT or DATA address
129-130 | $81-$82     | Var.last used. VAR$=CHR$(PEEK(129))+CHR$(PEEK(130))
131-132 | $83-$84     | Last-Used-Varible Address  (FP)
175-176 | $AF-$B0     | End of Applesoft Program (Normally=LOMEM)
202-203 | $CA-$CB     | Start of Program Address (INT)
204-205 | $CC-CD      | End of Varible Storage (INT)
214     | $D6         | RUN Flag (POKE 214,255 sets Applesoft run-only.)
216     | $D8         | ONERR Flag (POKE 216,0 cancels ONERR; en norm errs)
218-219 | $DA-$DB     | Line# of ONERR Error
222     | $DE         | Error Code  (FP)
224-225 | $E0-$E1     | Horizontal Coordinate of HPLOT
226     | $E2         | Vertical Coordinate of HPLOT
232-233 | $E8-$E9     | Start address of Shape Table
241     | $F1         | 256 - SPEED value (SPEED=255 --> $F1: 01)  (FP)
250-254 | $FA-$FE     | Free Space (normally open to user)

--Jon Relay and Apple II Textfiles ( http://www.textfiles.com/apple/ ).

----------------------------


Useful CALLs

Example: from the BASIC prompt, CALL -151 enters the monitor.

 Hex   Dec
$BEF8 48888  ProDOS- recovers from "NO BUFFERS AVAILABLE" error
$D683 54915  Inits Applesoft stack- scraps false "OUT OF MEMORY" error.
$F328 -3288  Repairs Applesoft stack after an ONERR GOTO handles an error.
$F3D4 -3116  HGR2
$F3DE -3106  HGR
$F3F2 -3086  Clear HI-RES screen to Black
$F3F6 -3082  Clear HI-RES screen to recent HCOLOR
$F5CB -2613  Move HI-RES cursor coords to 224-226
$F800 -2048  PLOT a LO-RES POINT (AC:Y-COORD  Y:X-COORD)
$F819 -2023  DRAW a HORIZONTAL LO-RES LINE.
$F828 -2008  DRAW a VERTICAL LO-RES LINE.
$F832 -1998  CLEAR LO-RES SCREEN 1 and set GRAPHICS mode.
$F836 -1994  CLEAR top 20 lines of LO-RES Graphics
$F847 -1977  CALCULATE LO-RES Graphics base ADDRESS.
$F85F -1953  Change LO-RES COLOR to COLOR + 3
$F940 -1728  PRINT contents of X & Y (REG 9 as 4 HEX digits)
$F94C -1716  PRINT X BLANKS (X REG contains # to PRINT)
$FA86 -1402  IRQ HANDLER
$FA92 -1390  BREAK HANDLER
$FAA6 -1370  RE-BOOTS DISK SYSTEM
$FAD7 -1321  to display USER REGISTERS
$FB2F -1233  TEXT- screen init
$FB39 -1223  set SCREEN to TEXT mode
$FB40 -1216  GR- set GRAPHICS mode
$FB4B -1205  set NORMAL WINDOW
$FB60 -1184  Prints the 'Apple ][' at the top of your screen.
$FBC1 -1087  CALCULATE TEXT BASE ADDRESS
$FBE4 -1052  SOUND BELL
$FBF4 -1036  to MOVE CURSOR RIGHT
$FBFD -1027  OUTPUT A-REG as ASCII on TEXT SCREEN 1
$FC10 -1008  to MOVE CURSOR LEFT
$FC1A  -998  to MOVE CURSOR UP
$FC22  -990  PERFORM a VERTICAL TAB to ROW in ACCUMULATOR
$FC2C  -980  PREFORM ESCAPE FUNCTION
$FC42  -958  CLEAR from CURSOR to END of PAGE (ESC -F)
$FC58  -936  HOME & CLEAR SCREEN (Destroys ACCUMULATOR & Y-REG)
$FC62  -926  PERFORM a CARRIAGE RETURN
$FC66  -922  PERFORM a LINE FEED
$FC70  -912  SCOLL UP 1 LINE (Destroys ACCUMULATOR & Y-REG)
$FC95  -875  Clear entire Text line.
$FC9C  -868  CLEAR from CURSOR to END of LINE (ESC-E)
$FDOC  -756  GET KEY from KEYBOARD (Destroys A & Y-REG) WAIT for KEY PRESS.
$FD5A  -678  Wait for RETURN
$FD5C  -676  Sound Bell and wait for RETURN
$FD67  -665  PREFORM CARRIAGE RETURN & GET LINE of TEXT.
$FD6A  -662  GET LINE of TEXT from KEYBOARD (X RETND with # of CHARACTERS)
$FD6F  -657  INPUT which accepts commas & colons. Here is an example:
             PRINT "NAME (LAST, FIRST): ";: CALL-657: N$="": FOR X= 512 TO 719:
             IF PEEK (X) < > 141 THEN N$= N$ + CHR$ (PEEK (X) -128) : NEXT X

$FD8E  -626  PRINT CARRIAGE RETURN (Destroys ACCUMULATOR & Y-REG)
$FDDA  -550  PRINT CONTENTS of ACCUMULATOR as 2 HEX DIGETS.
$FDE3  -541  PRINT a HEX digit
$FDED  -531  OUTPUT CHARACTER IN ACCUMULATOR. (Destroys A & Y-REG COUNT)
$FDF0  -528  GET MONITOR CHARACTER OUTPUT
$FE2C  -468  PERFORM MEMORY MOVE A1-A2 TO A4. Here is an example:
             10 POKE 60,Source Start address Lo
             20 POKE 61,Source Start address Hi
             30 POKE 62,Source End address Lo
             40 POKE 63,Source End address Hi
            50 POKE 66,Destination address Lo
           60 POKE 67,Destination address Hi
             70 CALL -468

$FE80  -384  set INVERSE mode
$FE84  -380  set NORMAL mode
$FEBF  -321  DISPLAY A,S,Y,P,S REG. (CURRENT VALUES)
$FF2D  -211  PRINT "ERR" & SOUNDS BELL (Destroys ACCUMULATOR & Y-REG)
$FF3A  -198  PRINT BELL (Destroys ACCUMULATOR & Y-REG)
$FF59  -167  ENTER MONITOR RESET, TEXT mode, "COLD START"
$FF65  -155  ENTER MONITOR, ring BELL, "WARM START"
$FF69  -151  Go to MONITOR
$FF70  -144  SCAN INPUT BUFFER (ADDRESS $200...)
